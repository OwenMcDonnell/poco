	model {
		components {
/*
			TestApp(SharedLibraryBinarySpec) {
				sources {
					cpp {
						source {
							srcDir 'src'
							include 'TestApp.cpp'
						}
						lib project: ':CppUnit', library: 'PocoCppUnit'
						lib project: ':Foundation', library: 'PocoFoundation'
					}
				}
			}
*/
			FoundationTestRunner(NativeLibrarySpec) {
				sources {
					cpp {
						source {
							srcDir 'src'
							include '**/*.cpp'
							exclude 'WinDriver.cpp'
							exclude '*_WINCE.cpp'
							exclude 'TestApp*.cpp'
						}
						lib project: ':CppUnit', library: 'PocoCppUnit'
						lib project: ':Foundation', library: 'PocoFoundation'
					}
				}
			}
		}
		testSuites {
			FoundationTestSuite(CppUnitTestSuiteSpec) {
				testing $.components.FoundationTestRunner
			}
		}
		binaries {
			withType(NativeExecutableSpec) {
				lib project: ':CppUnit', library: 'PocoCppUnit', linkage: 'shared'
				lib project: ':Foundation', library: 'PocoFoundation', linkage: 'shared'
			}
		    withType(CppUnitTestSuiteBinarySpec) {
				lib project: ':CppUnit', library: 'PocoCppUnit', linkage: 'shared'
				lib project: ':Foundation', library: 'PocoFoundation', linkage: 'shared'
			}
		}

	}

task testrunner(type:Exec) {
  workingDir '../tomcat/bin'

  //on windows:
  commandLine 'cmd', '/c', 'stop.bat'

  //on linux
  commandLine './stop.sh'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}

task hello(type: Exec) {
  executable "cmd.exe"
  args "echo",  "'hello from your shell'"
}