	apply plugin: "cpp"

	model {
		components {
			CppUnit(NativeLibrarySpec) {
				binaries.withType(SharedLibraryBinarySpec) {
					// Define a preprocessor macro that only applies to shared libraries
				}
			}
		}
	}
	model {
		binaries {
			withType(StaticLibraryBinarySpec) {
				// Define a preprocessor macro for every binary
				cppCompiler.define "NDEBUG"

				// Define toolchain-specific compiler and linker options
				if (toolChain in Gcc) {
					cppCompiler.args "-O2", "-fno-access-control"
					linker.args "-Xlinker", "-S"
				}
				if (toolChain in VisualCpp) {
					cppCompiler.define 'POCO_STATIC'

					if (buildTypes == buildTypes.debug) {
						cppCompiler.args '/Od'
						cppCompiler.args '/Zi'
						linker.args '/DEBUG'
					}
					cppCompiler.args '/Zc:wchar_t'
					cppCompiler.args '/Zc:inline'
					cppCompiler.args '/Zc:forScope'
					cppCompiler.args '/GR'
					cppCompiler.args '/GF'
					cppCompiler.args '/GS'
					cppCompiler.args '/EHsc'
					cppCompiler.define 'WIN32'
					cppCompiler.define '_WIN32'
					cppCompiler.define '_WINDOWS'
					cppCompiler.define '_MBCS'
				
					linker.args 'kernel32.lib'
					linker.args 'user32.lib'
					linker.args 'gdi32.lib'
					linker.args 'comdlg32.lib'
					linker.args 'advapi32.lib'
					linker.args 'shell32.lib'
					linker.args 'ole32.lib'
					linker.args 'oleaut32.lib'
					linker.args 'uuid.lib'
				
					if (buildTypes == buildTypes.debug) {
						cppCompiler.args "/MDd"
					} else {
						cppCompiler.args "/MD"
					}
					linker.args '/SUBSYSTEM:CONSOLE'
				}
			}
			withType(SharedLibraryBinarySpec) {
				// Define a preprocessor macro for every binary
				cppCompiler.define "NDEBUG"

				// Define toolchain-specific compiler and linker options
				if (toolChain in Gcc) {
					cppCompiler.args "-O2", "-fno-access-control"
					linker.args "-Xlinker", "-S"
				}
				if (toolChain in VisualCpp) {
					cppCompiler.define '_USRDLL'
					cppCompiler.define '_WINDLL'
					cppCompiler.define "CppUnit_EXPORTS"

					if (buildTypes == buildTypes.debug) {
						cppCompiler.args '/Od'
						cppCompiler.args '/Zi'
						linker.args '/DEBUG'
					}
					cppCompiler.args '/Zc:wchar_t'
					cppCompiler.args '/Zc:inline'
					cppCompiler.args '/Zc:forScope'
					cppCompiler.args '/GR'
					cppCompiler.args '/GF'
					cppCompiler.args '/GS'
					cppCompiler.args '/EHsc'
					cppCompiler.define 'WIN32'
					cppCompiler.define '_WIN32'
					cppCompiler.define '_WINDOWS'
					cppCompiler.define '_MBCS'
				
					linker.args 'kernel32.lib'
					linker.args 'user32.lib'
					linker.args 'gdi32.lib'
					linker.args 'comdlg32.lib'
					linker.args 'advapi32.lib'
					linker.args 'shell32.lib'
					linker.args 'ole32.lib'
					linker.args 'oleaut32.lib'
					linker.args 'uuid.lib'
				
					if (buildTypes == buildTypes.debug) {
						cppCompiler.args "/MDd"
					} else {
						cppCompiler.args "/MD"
					}
					linker.args '/SUBSYSTEM:CONSOLE'
				}
			}
		}
	}
