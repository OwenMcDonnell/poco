plugins {
	id 'c'
	id 'cpp'
	id 'cunit-test-suite'
	id 'cppunit-test-suite'
	id 'windows-resources'
	id 'windows-messages'
	id 'visual-studio'
}


repositories {
	mavenCentral()
}

/*
dependencies {
	testCompile group: 'org.jvnet.hudson.plugins', name: 'cppunit', version: '1.10'
}
*/

File appendDebugSuffix(File binaryFile) {
	String name = binaryFile.getName()
	File parent = binaryFile.getParentFile()
	int extensionSeparatorIndex = name.lastIndexOf('.')
	return new File(parent, name.substring(0, extensionSeparatorIndex) + "d" + name.substring(extensionSeparatorIndex))
}

File prefixByPoco(File binaryFile) {
	String name = binaryFile.getName()
	File parent = binaryFile.getParentFile()
	return new File(parent, "Poco" + name);
}
File toBin(File sharedFile, Platform platform) {
	String name = sharedFile.getName()
	String target
	if (platform.architecture.name == 'x86') {
		target = 'bin'
	} else
	if (platform.architecture.name == 'x64') {
		target = 'bin64'
	} else {
		throw new GradleException("Unknown architecture: " + platform)
	}
	File parent = new File(rootDir, target)
	return new File(parent, name);
}
File toLib(File linkFile, Platform platform) {
	String name = linkFile.getName()
	String target
	if (platform.architecture.name == 'x86') {
		target = 'bin' // 'lib'
	} else
	if (platform.architecture.name == 'x64') {
		target = 'bin64' // 'lib64'
	} else {
		throw new GradleException("Unknown architecture: " + platform)
	}
	File parent = new File(rootDir, target )
	return new File(parent, name);
}
File toStatic(File staticFile) {
	String name = staticFile.getName()
	File parent = new File(rootDir, "static")
	return new File(parent, name);
}
allprojects {
	buildDir = new File("buildgradle")	
}
subprojects {
	apply plugin:	'c'
	apply plugin:	'cpp'
	apply plugin:	'visual-studio'
	apply plugin:	'cunit-test-suite'
	apply plugin:	'cppunit-test-suite'
 	apply plugin:	'windows-resources'
	apply plugin:	'windows-messages'

	
	model {
		buildTypes {
			release
			debug
		}
		repositories {
			libs(PrebuiltLibraries) {
				def  opensslHome = new File(rootDir, "openssl")
				crypto {
					headers.srcDir "$opensslHome/include"

					binaries.withType(StaticLibraryBinary) {
						if (buildType == buildTypes.debug) {
							def libName = targetPlatform.operatingSystem.windows ? 'libeay32MDd.lib' : 'libssl.a'
							staticLibraryFile = file("$opensslHome/win32/bin/debug/$libName")
						} else
						if (buildType == buildTypes.release) {
							def libName = targetPlatform.operatingSystem.windows ? 'libeay32MD.lib' : 'libssl.a'
							staticLibraryFile = file("$opensslHome/win32/bin/release/$libName")
						} else {
							throw new GradleException("Unknown buildType" + buildType)
						}
					}
/*
					binaries.withType(SharedLibraryBinary) {
						if (buildType == buildTypes.debug) {
							def libName = targetPlatform.operatingSystem.windows ? 'libeay32MDd.lib' : 'libssl.a'
							sharedLibraryFile = file("$opensslHome/win32/bin/debug/$libName")
							sharedLibraryLinkFile = file("$opensslHome/win32/bin/debug/$libName")
						} else
						if (buildType == buildTypes.release) {
							def libName = targetPlatform.operatingSystem.windows ? 'libeay32MD.lib' : 'libssl.a'
							staticLibraryFile = file("$opensslHome/win32/bin/release/$libName")
						} else {
							throw new GradleException("Unknown buildType" + buildType)
						}
					}
*/
				}
				ssl {
					headers.srcDir "$opensslHome/include"

					binaries.withType(StaticLibraryBinary) {
						if (buildType == buildTypes.debug) {
							def libName = targetPlatform.operatingSystem.windows ? 'ssleay32MDd.lib' : 'libssl.a'
							staticLibraryFile = file("$opensslHome/win32/bin/debug/$libName")
						} else
						if (buildType == buildTypes.release) {
							def libName = targetPlatform.operatingSystem.windows ? 'ssleay32MD.lib' : 'libssl.a'
							staticLibraryFile = file("$opensslHome/win32/bin/release/$libName")
						} else {
							throw new GradleException("Unknown buildType" + buildType)
						}
					}
				}
			}
		}
		components {
			withType(NativeComponentSpec) {
				binaries.withType(NativeBinarySpec) {
					if (buildType == buildTypes.debug) {
						if (it instanceof SharedLibraryBinarySpec) {
							sharedLibraryFile     = toBin(prefixByPoco(appendDebugSuffix(sharedLibraryFile)), targetPlatform)
							sharedLibraryLinkFile = toLib(prefixByPoco(appendDebugSuffix(sharedLibraryLinkFile)), targetPlatform)
						} else
						if (it instanceof StaticLibraryBinarySpec) {
							staticLibraryFile = toStatic(prefixByPoco(appendDebugSuffix(staticLibraryFile)))
						} else
						if (it instanceof NativeExecutableBinarySpec) {
							executable.file = toBin(appendDebugSuffix(executable.file), targetPlatform)
						} else {
							throw new GradleException("Unknown native library binary")
						}
					} else
					if (buildType == buildTypes.release) {
						if (it instanceof SharedLibraryBinarySpec) {
							sharedLibraryFile = toBin(prefixByPoco(sharedLibraryFile), targetPlatform)
							sharedLibraryLinkFile = toLib(prefixByPoco(sharedLibraryLinkFile), targetPlatform)
						} else
						if (it instanceof StaticLibraryBinarySpec) {
							staticLibraryFile = toStatic(prefixByPoco(staticLibraryFile))
						} else
						if (it instanceof NativeExecutableBinarySpec) {
							executable.file = toBin(executable.file, targetPlatform)
						} else {
							throw new GradleException("Unknown native library binary")
						} 
					} else {
						throw new GradleException("Unknown buildType" + buildType)
					}
				}
			}
		}

		toolChains {
			visualCpp(VisualCpp) {
				// Specify the installDir if Visual Studio cannot be located
				// installDir "C:/Apps/Microsoft Visual Studio 10.0"
			}
			gcc(Gcc) {
				// Uncomment to use a GCC install that is not in the PATH
				// path "/usr/bin/gcc"
			}
			clang(Clang)
		}

		platforms {
			win32 {
				operatingSystem "windows"
				architecture 'x86'
			}
			win64 {
				operatingSystem "windows"
				architecture 'x64'
			}
			linux32 {
				operatingSystem "linux"
				architecture 'x86'
			}
			linux64 {
				operatingSystem "linux"
				architecture 'x64'
			}
		}

		flavors {
			bundled
//			unbundled
		}

		binaries {
			all {
				if (flavor != flavors.bundled) {
					cCompiler.define 'POCO_UNBUNDLED'
					cppCompiler.define 'POCO_UNBUNDLED'
				}
				if (buildType == buildTypes.debug) {
					cCompiler.define '_DEBUG'
					cppCompiler.define '_DEBUG'
				} else 
				if (buildType == buildTypes.release) {
					cCompiler.define 'NDEBUG'
					cppCompiler.define 'NDEBUG'
				} else {
					throw new GradleException("Unknown buildType" + buildType)
				}
			
				if (toolChain in VisualCpp) {
					if (targetPlatform == platforms.win64) {
						linker.args '/MACHINE:X64'
					}
					if (buildType == buildTypes.debug) {
						cCompiler.args '/Zi'
						cppCompiler.args '/Zi'
						linker.args '/DEBUG'
					}
					cCompiler.args '/FS'
					cCompiler.args '/Zc:wchar_t'
					cCompiler.args '/Zc:inline'
					cCompiler.args '/Zc:forScope'
					cCompiler.args '/GR'
					cCompiler.args '/GF'
					cCompiler.args '/EHsc'
					cCompiler.define 'WIN32'
					cCompiler.define '_WIN32'
					cCompiler.define '_WINDOWS'
					cCompiler.define '_MBCS'

					cppCompiler.args '/FS'
					cppCompiler.args '/Zc:wchar_t'
					cppCompiler.args '/Zc:inline'
					cppCompiler.args '/Zc:forScope'
					cppCompiler.args '/GR'
					cppCompiler.args '/GF'
					cppCompiler.args '/EHsc'
					cppCompiler.define 'WIN32'
					cppCompiler.define '_WIN32'
					cppCompiler.define '_WINDOWS'
					cppCompiler.define '_MBCS'
				
					linker.args 'kernel32.lib'
					linker.args 'user32.lib'
					linker.args 'gdi32.lib'
					linker.args 'comdlg32.lib'
					linker.args 'advapi32.lib'
					linker.args 'shell32.lib'
					linker.args 'ole32.lib'
					linker.args 'oleaut32.lib'
					linker.args 'uuid.lib'
				
					if (buildType == buildTypes.debug) {
						cCompiler.args "/MDd"
						cppCompiler.args "/MDd"
					} else 
					if (buildType == buildTypes.release) {
						cCompiler.args "/MD"
						cppCompiler.args "/MD"
					} else {
						throw new GradleException("Unknown buildType" + buildType)
					}
					linker.args '/SUBSYSTEM:CONSOLE'
				}
			}
			withType(SharedLibraryBinarySpec) {
				if (toolChain in VisualCpp) {
					cCompiler.define   '_USRDLL'
					cCompiler.define   '_WINDLL'
					cppCompiler.define '_USRDLL'
					cppCompiler.define '_WINDLL'
				}
			}
			withType(StaticLibraryBinarySpec) {
				if (toolChain in VisualCpp) {
					cCompiler.define   '_LIB'
					cppCompiler.define '_LIB'
					cCompiler.define   'POCO_STATIC'
					cppCompiler.define 'POCO_STATIC'
				}
			}
			withType(NativeExecutableSpec) {
				if (toolChain in VisualCpp) {
					
				}
			}
		}
    }
}


